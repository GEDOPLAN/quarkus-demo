# Log
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss,SSS} %-5p [%c] (%t) %s%e%n
quarkus.log.console.level=ALL
quarkus.log.console.darken=1

quarkus.log.level=WARN

quarkus.log.category."de.gedoplan".level=DEBUG
quarkus.log.category."io.quarkus".level=INFO

# Datasource
%prod.quarkus.datasource.db-kind=pg
%prod.datasource.jdbc.url=jdbc:postgresql://${db.host:localhost}:${db.port:5432}/showcase
%prod.datasource.username=showcase
%prod.datasource.password=showcase

quarkus.hibernate-orm.database.generation=update

# Security: Users and roles are stored in database
quarkus.security.jdbc.enabled=true
quarkus.security.jdbc.principal-query.sql=SELECT u.CRYPTED_PWD FROM SHOWCASE_USERS u WHERE u.ID=?
quarkus.security.jdbc.principal-query.bcrypt-password-mapper.enabled=true
quarkus.security.jdbc.principal-query.bcrypt-password-mapper.password-index=1
quarkus.security.jdbc.principal-query.bcrypt-password-mapper.salt-index=-1
quarkus.security.jdbc.principal-query.bcrypt-password-mapper.iteration-count-index=-1

quarkus.security.jdbc.principal-query.roles.sql=SELECT r.ROLE FROM SHOWCASE_ROLES r WHERE r.USER_ID=?
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1
quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups

# Security: REST API uses basic auth; policy "permit" is refined by annotations
quarkus.http.auth.basic=true
quarkus.http.auth.permission."api".paths=/api/*
quarkus.http.auth.permission."api".auth-mechanism=basic
quarkus.http.auth.permission."api".policy=permit

# Security: Web app uses form based auth; private pages require role "demoRole"
quarkus.http.auth.form.enabled=true
quarkus.http.auth.form.login-page=/login.xhtml
quarkus.http.auth.form.error-page=/login_error.xhtml
quarkus.http.auth.permission."private".paths=/private/*
quarkus.http.auth.permission."private".auth-mechanism=form
quarkus.http.auth.permission."private".policy=demoRoleOnly
quarkus.http.auth.policy."demoRoleOnly".roles-allowed=demoRole
